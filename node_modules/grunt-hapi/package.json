{
  "_args": [
    [
      {
        "raw": "grunt-hapi@^0.8.1",
        "scope": null,
        "escapedName": "grunt-hapi",
        "name": "grunt-hapi",
        "rawSpec": "^0.8.1",
        "spec": ">=0.8.1 <0.9.0",
        "type": "range"
      },
      "/Users/Beth/bloc/weatherornot"
    ]
  ],
  "_from": "grunt-hapi@>=0.8.1 <0.9.0",
  "_id": "grunt-hapi@0.8.1",
  "_inCache": true,
  "_location": "/grunt-hapi",
  "_npmUser": {
    "name": "athieriot",
    "email": "a.thieriot@gmail.com"
  },
  "_npmVersion": "1.3.21",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-hapi@^0.8.1",
    "scope": null,
    "escapedName": "grunt-hapi",
    "name": "grunt-hapi",
    "rawSpec": "^0.8.1",
    "spec": ">=0.8.1 <0.9.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-hapi/-/grunt-hapi-0.8.1.tgz",
  "_shasum": "9a99feb7a6b1eca8fb29eafb6a87febfe7413d13",
  "_shrinkwrap": null,
  "_spec": "grunt-hapi@^0.8.1",
  "_where": "/Users/Beth/bloc/weatherornot",
  "author": {
    "name": "AurÃ©lien Thieriot",
    "email": "a.thieriot@gmail.com",
    "url": "aurelien.thier.io"
  },
  "bugs": {
    "url": "https://github.com/aurelien/grunt-hapi/issues"
  },
  "dependencies": {
    "grunt-contrib-watch": "~0.6.1"
  },
  "description": "Start an Hapi web server using Grunt",
  "devDependencies": {
    "follow-redirects": "0.0.3",
    "grunt": "~0.4.5",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-nodeunit": "^0.4.0",
    "hapi": "^6.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "9a99feb7a6b1eca8fb29eafb6a87febfe7413d13",
    "tarball": "https://registry.npmjs.org/grunt-hapi/-/grunt-hapi-0.8.1.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/aurelien/grunt-hapi",
  "keywords": [
    "gruntplugin"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/aurelien/grunt-hapi/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "maintainers": [
    {
      "name": "athieriot",
      "email": "a.thieriot@gmail.com"
    }
  ],
  "name": "grunt-hapi",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": "~0.4.5"
  },
  "readme": "# grunt-hapi\n\n> Start an Hapi web server using Grunt\n\n## Getting Started\nThis plugin requires Grunt `~0.4.2`\nAnd it is compatible with Hapi version 1.x and 2.x\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-hapi --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-hapi');\n```\n\n## The \"hapi\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `hapi` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  hapi: {\n    custom_options: {\n      options: {\n        server: 'web',\n        bases: {\n          '/': '.'\n        }\n      }\n    }\n  }\n})\n```\n\n### Options\n\n#### options.server\nType: `String`\nDefault value: `null`\n\nIn case of string, a filepath that points to a module that exports an Hapi server object.\n\nOr alternatively since v0.8.0, a filepath that points to a module that exports an Hapi server object constructor\nfunction.\n[`create_server.js`](test/fixtures/create_server.js) provides one example for such a constructor. The function signature of the exported function\nhas been kept consistent with Hapi's. This new method can come handy if you are wanting to override the construction attributes from \nyour `Gruntfile`.\n\nYou may ask: but how would the caller of this constructor, namely `grunt-hapi` know about your desired `host`, `port` or `options`. See\nthe following additional `grunt-hapi` options for that: `host`, `port`, `create_options` respectively.\n\nIf you are wondering about why follow this obscure mechanism - read ahead, The `options.server` filepath is being `require`d by `grunt-hapi`, why cannot a user `require` it in the `Gruntfile` and \nhave total power of construction in a straight-forward fashion? The answer to that is that I tried it but ran into\ncircular-reference issues in `grunt.initConfig`. Perhaps, the `Hapi` instance has some circular-references for convenience.\n\n#### options.host\nType: `String`\nDefault value: `null`\n\nThe host value that would be used if `server` option provided to `grunt-hapi` is a module with exported constructor function.\n\n#### options.port\nType: `Number`\nDefault value: `null`\n\nThe port value that would be used if `server` option provided to `grunt-hapi` is a module with exported constructor function.\n\n#### options.create_options\nType: `Object`\nDefault value: `null`\n\nThe options object that would be used if `server` option provided to `grunt-hapi` is a module with exported constructor function.\n\n#### options.bases\nType: `Object`\nDefault value: `{'/': '.'}`\n\nKey/Value pair that associate a URI path from where you want to access static files with a FilePath that point to a directory where Hapi can find these static files.\n\n#### options.noasync\nType: `Boolean`\nDefault value: `false`\n\nBy default, grunt-hapi is configured to be compatible with grunt-contrib-watch and launch the server as an asynchronous task.\nIf you just want to run `grunt hapi` and directly have access to your application, you can specify the `noasync` option at True. \n\n### Usage Examples\n\n#### Yeoman.io friendly\nIn this example, the module `index.js` located in the `lib` directory will be use to start an instance of Hapi server. The files in the `public` directory will be available from `/public`\n\nAlso, thanks to [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch), the server will be restarted at every change.\n\nGruntfile.js:\n```\n...\ngrunt.initConfig({\n  watch: {\n    hapi: {\n      files: ['lib/*.{js, coffee}'],\n      tasks: ['hapi'],\n      options: {\n        spawn: false // Newer versions of grunt-contrib-watch might require this parameter.\n      }\n    }\n  },\n  hapi: {\n    custom_options: {\n      options: {\n        server: require('path').resolve('./lib/index'),\n        bases: {\n          '/public': require('path').resolve('./public/')\n        }\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [\n  'hapi',\n  'watch'\n]);\n...\n```\n\nlib/index.js:\n```\nvar Hapi = require('hapi');\n\nvar app = new Hapi.Server();\n\nmodule.exports = app;\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Thanks\nThis project is highly inspired by [grunt-express](https://github.com/blai/grunt-express)\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/athieriot/grunt-hapi/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/aurelien/grunt-hapi.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.8.1"
}
