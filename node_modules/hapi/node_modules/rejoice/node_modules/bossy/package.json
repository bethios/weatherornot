{
  "_args": [
    [
      {
        "raw": "bossy@1.0.2",
        "scope": null,
        "escapedName": "bossy",
        "name": "bossy",
        "rawSpec": "1.0.2",
        "spec": "1.0.2",
        "type": "version"
      },
      "/Users/Beth/bloc/weatherornot/node_modules/hapi"
    ]
  ],
  "_from": "bossy@1.0.2",
  "_id": "bossy@1.0.2",
  "_inCache": true,
  "_location": "/hapi/rejoice/bossy",
  "_npmUser": {
    "name": "wyatt",
    "email": "wpreul@gmail.com"
  },
  "_npmVersion": "1.4.21",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bossy@1.0.2",
    "scope": null,
    "escapedName": "bossy",
    "name": "bossy",
    "rawSpec": "1.0.2",
    "spec": "1.0.2",
    "type": "version"
  },
  "_requiredBy": [
    "/hapi/rejoice"
  ],
  "_resolved": "https://registry.npmjs.org/bossy/-/bossy-1.0.2.tgz",
  "_shasum": "07d7191cd6607a329402823cc72b8f3349cbe827",
  "_shrinkwrap": null,
  "_spec": "bossy@1.0.2",
  "_where": "/Users/Beth/bloc/weatherornot/node_modules/hapi",
  "bugs": {
    "url": "https://github.com/hapijs/bossy/issues"
  },
  "contributors": [
    {
      "name": "Eran Hammer",
      "email": "eran@hammer.io",
      "url": "http://hueniverse.com"
    },
    {
      "name": "Wyatt Preul",
      "email": "wpreul@gmail.com",
      "url": "http://jsgeek.com"
    }
  ],
  "dependencies": {
    "hoek": "2.x.x"
  },
  "description": "Command line options parser",
  "devDependencies": {
    "lab": "4.x.x"
  },
  "directories": {},
  "dist": {
    "shasum": "07d7191cd6607a329402823cc72b8f3349cbe827",
    "tarball": "https://registry.npmjs.org/bossy/-/bossy-1.0.2.tgz"
  },
  "engines": {
    "node": ">=0.10.30"
  },
  "gitHead": "92c6a6723877aca7f3eabc9a4bbab3d1af7f7eda",
  "homepage": "https://github.com/hapijs/bossy#readme",
  "keywords": [
    "cli",
    "command line",
    "options",
    "parser"
  ],
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/hapijs/bossy/raw/master/LICENSE"
    }
  ],
  "main": "index",
  "maintainers": [
    {
      "name": "wyatt",
      "email": "wpreul@gmail.com"
    },
    {
      "name": "arb",
      "email": "arbretz@gmail.com"
    }
  ],
  "name": "bossy",
  "optionalDependencies": {},
  "readme": "# bossy\n\nCommand line options parser.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/bossy.png)](http://travis-ci.org/hapijs/bossy)\n\nLead Maintainer - [Wyatt Preul](https://github.com/geek)\n\n\n## Usage\n\n```js\nvar Bossy = require('bossy');\n\nvar definition = {\n    h: {\n        description: 'Show help',\n        alias: 'help',\n        type: 'boolean'\n    },\n    n: {\n        description: 'Show your name',\n        alias: 'name'\n    }\n};\n\n\nvar args = Bossy.parse(definition);\n\nif (args instanceof Error) {\n    console.error(args.message);\n    return;\n}\n\nif (args.h || !args.n) {\n    console.log(Bossy.usage(definition, 'hello -n <name>'));\n    return;\n}\n\nconsole.log('Hello ' + args.n);\nconsole.log('Hello ' + args.name);\n```\n\n## Methods\n\n### `parse(definition, [options)`\n\nExpects a *bossy* definition object and will return the parsed `process.argv` arguments provided.  If there is an error\nthen the return value will be an `instanceof Error`.\n\nOptions accepts the following keys:\n* `argv` - custom argv array value.  Defaults to process.argv.\n\n### `usage(definition, [usage], [options])`\n\nFormat a  *bossy* definition object for display in the console.  If `usage` is provided the returned value will\ninclude the usage value formatted at the top of the message.\n\nOptions accepts the following keys:\n* `colors` - Determines if colors are enabled when formatting usage.  Defaults to whatever TTY supports.\n\n\n## Definition Object\n\nThe definition object should be structured with each object key representing the short form of an available command\nline argument.  Each argument key supports the following properties:\n\n* `alias`: A string or array of strings that can also be used as the argument name.  For example:\n```\nh: {\n    alias: 'help'\n}\n```\n\n* `type`: Available types are: `boolean`, `range`, `number`, `string`.  Defaults to `string`.\n\n* `description`: Description message that will be returned with usage information.\n\n* `require`: Boolean to indicate if the argument is required.  Defaults to `false`\n\n* `default`: A default value to assign to the argument if its not provided as an argument.\n\n* `valid`: A value or array of values that the argument is allowed to equal.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/bossy.git"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "version": "1.0.2"
}
